import React, { useEffect, useRef, useState } from "react";

export default function FileReceiver() {
  const chunks = useRef<Uint8Array[]>([]);
  const videoRef = useRef<HTMLVideoElement>(null);
  const [blobUrl, setBlobUrl] = useState<string | null>(null);

  useEffect(() => {
    const ws = new WebSocket("wss://localhost:8045");

    ws.binaryType = "arraybuffer";

    ws.onopen = () => {
      console.log("WebSocket connection opened");
    };

    ws.onmessage = (event) => {
      if (typeof event.data === "string") {
        const message = JSON.parse(event.data);
        if (message.type === "fileStart") {
          chunks.current = [];
        } else if (message.type === "fileEnd") {
          createBlobUrl();
        }
      } else {
        const data = new Uint8Array(event.data);

        chunks.current = [...chunks.current, data];
      }
    };

    ws.onclose = () => {
      console.log("WebSocket connection closed");
    };

    ws.onerror = (error) => {
      console.error("WebSocket error:", error);
    };

    return () => {
      ws.close();
    };
  }, []);

  const createBlobUrl = () => {
    if (chunks.current.length > 0) {
      const blob = new Blob(chunks.current, { type: "video/mp4" });
      const url = URL.createObjectURL(blob);
      console.log(url);
      setBlobUrl(url);

      if (videoRef.current) {
        videoRef.current.src = url;
      }
    }
  };

  const downloadVideo = () => {
    if (blobUrl) {
      const link = document.createElement("a");
      link.href = blobUrl;
      link.download = "downloaded-video.mp4";
      link.click();
    }
  };

  return (
    <div style={{ padding: "20px" }}>
      <h1>Video Stream Receiver</h1>
      <video
        ref={videoRef}
        controls
        style={{ width: "100%", maxHeight: "500px" }}
      />
      <button
        onClick={downloadVideo}
        disabled={!blobUrl}
        style={{ marginTop: "10px" }}
      >
        Download Video
      </button>
    </div>
  );
}
import uWS from "uWebSockets.js";
import { randomFillSync } from "crypto";
import fs from "fs";
import path from "path";
import busboy from "busboy";

// Ensure the uploads folder exists
const uploadsDir = path.join(__dirname, "uploads");
if (!fs.existsSync(uploadsDir)) {
  fs.mkdirSync(uploadsDir);
}

const sslOptions = {
  key_file_name: "../certs/tabletop-table-static-content-server-key.pem",
  cert_file_name: "../certs/tabletop-table-static-content-server.pem",
};

const random = (() => {
  const buf = Buffer.alloc(16);
  return () => randomFillSync(buf).toString("hex");
})();

const connectedClients = new Set<uWS.WebSocket<unknown>>(); // Store WebSocket clients

uWS
  .SSLApp(sslOptions)
  .ws("/*", {
    compression: uWS.SHARED_COMPRESSOR,
    maxPayloadLength: 16 * 1024 * 1024, // 16 MB
    idleTimeout: 60,
    open: (ws) => {
      connectedClients.add(ws);
      console.log("WebSocket client connected");
    },
    close: (ws) => {
      connectedClients.delete(ws);
      console.log("WebSocket client disconnected");
    },
  })
  .options("/*", (res, req) => {
    res.cork(() => {
      res
        .writeHeader("Access-Control-Allow-Origin", "https://localhost:8080")
        .writeHeader("Access-Control-Allow-Methods", "POST, OPTIONS")
        .writeHeader("Access-Control-Allow-Headers", "Content-Type")
        .writeStatus("204 No Content")
        .end();
    });
  })
  .post("/*", (res, req) => {
    res.cork(() => {
      res.writeHeader("Access-Control-Allow-Origin", "https://localhost:8080");
    });

    const headers: { [header: string]: string } = {};
    req.forEach((key, value) => {
      headers[key] = value;
    });

    const bb = busboy({ headers });

    bb.on("file", (name, file, info) => {
      const startMessage = JSON.stringify({
        type: "fileStart",
        filename: info.filename,
      });
      connectedClients.forEach((client) => {
        client.send(startMessage, false);
      });

      const saveTo = path.join(uploadsDir, `${random()}-${info.filename}`);
      const writeStream = fs.createWriteStream(saveTo);

      file.on("data", (chunk) => {
        connectedClients.forEach((client) => {
          client.send(chunk, true); // Send chunk as binary
        });
      });

      file.pipe(writeStream);

      file.on("end", () => {
        const completionMessage = JSON.stringify({ type: "fileEnd" });
        connectedClients.forEach((client) => {
          client.send(completionMessage, false);
        });
      });

      file.on("error", (err) => {
        console.error(`Error writing file ${info.filename}:`, err);
      });
    });

    bb.on("close", () => {
      res.cork(() => {
        console.log("Upload complete");
        res.writeStatus("200 OK").end("That's all folks!");
      });
    });

    let bodyBuffer = Buffer.alloc(0);

    res.onData((chunk, isLast) => {
      bodyBuffer = Buffer.concat([bodyBuffer, Buffer.from(chunk)]);

      if (isLast) {
        bb.end(bodyBuffer);
      } else {
        bb.write(bodyBuffer);
        bodyBuffer = Buffer.alloc(0);
      }
    });

    res.onAborted(() => {
      console.log("Request aborted");
      bb.destroy();
    });
  })
  .listen(8045, (token) => {
    if (token) {
      console.log("Listening on https://localhost:8045");
    } else {
      console.log("Failed to start the server");
    }
  });



















































import uWS from "uWebSockets.js";
import { randomFillSync } from "crypto";
import fs from "fs";
import path from "path";
import busboy from "busboy";
import { exec } from "child_process"; // For running shell commands (to invoke Shaka Packager)

// Ensure the uploads folder exists
const uploadsDir = path.join(__dirname, "../../nginxServer/uploads");
if (!fs.existsSync(uploadsDir)) {
  fs.mkdirSync(uploadsDir, { recursive: true });
}

// Ensure the output folder for processed videos exists
const processedDir = path.join(__dirname, "../../nginxServer/processed");
if (!fs.existsSync(processedDir)) {
  fs.mkdirSync(processedDir, { recursive: true });
}

const sslOptions = {
  key_file_name: "../certs/tabletop-table-static-content-server-key.pem",
  cert_file_name: "../certs/tabletop-table-static-content-server.pem",
};

const random = (() => {
  const buf = Buffer.alloc(16);
  return () => randomFillSync(buf).toString("hex");
})();

const connectedClients = new Set<uWS.WebSocket<unknown>>(); // Store WebSocket clients

// Function to process the uploaded video using Shaka Packager
const processVideoWithABR = (
  inputFile: string,
  outputDir: string,
  filename: string
): Promise<void> => {
  return new Promise((resolve, reject) => {
    const baseName = path.basename(filename, path.extname(filename));
    const video500kPath = path.join(outputDir, `${baseName}_500k.mp4`);
    const video1MPath = path.join(outputDir, `${baseName}_1M.mp4`);
    const video2MPath = path.join(outputDir, `${baseName}_2M.mp4`);
    const audioPath = path.join(outputDir, `${baseName}_audio.mp4`);
    const outputPath = path.join(outputDir, `${baseName}.mpd`);

    const packagerCommand = `packager-win-x64.exe \
      "in=${inputFile},stream=video,bandwidth=500000,output=${video500kPath}" \
      "in=${inputFile},stream=video,bandwidth=1000000,output=${video1MPath}" \
      "in=${inputFile},stream=video,bandwidth=2000000,output=${video2MPath}" \
      "in=${inputFile},stream=audio,output=${audioPath}" \
      --mpd_output "${outputPath}"`;

    const childProcess = exec(packagerCommand);

    let stderrBuffer = "";
    let stdoutBuffer = "";

    childProcess.stdout?.on("data", (data) => {
      stdoutBuffer += data;
      console.log("Shaka Packager stdout:", data.trim());
    });

    childProcess.stderr?.on("data", (data) => {
      stderrBuffer += data;
      console.warn("Shaka Packager stderr:", data.trim()); // Log as a warning, not error
    });

    childProcess.on("close", (code) => {
      if (code !== 0) {
        console.error(
          `Shaka Packager failed with exit code ${code}. stderr: ${stderrBuffer}`
        );
        reject(new Error(`Shaka Packager failed with exit code ${code}`));
      } else {
        console.log("Shaka Packager completed successfully.");
        resolve();
      }
    });

    childProcess.on("error", (err) => {
      console.error("Error running Shaka Packager:", err);
      reject(err);
    });
  });
};

uWS
  .SSLApp(sslOptions)
  .ws("/*", {
    compression: uWS.SHARED_COMPRESSOR,
    maxPayloadLength: 16 * 1024 * 1024, // 16 MB
    idleTimeout: 60,
    open: (ws) => {
      connectedClients.add(ws);
      console.log("WebSocket client connected");
    },
    close: (ws) => {
      connectedClients.delete(ws);
      console.log("WebSocket client disconnected");
    },
  })
  .options("/*", (res, req) => {
    res.cork(() => {
      res
        .writeHeader("Access-Control-Allow-Origin", "https://localhost:8080")
        .writeHeader("Access-Control-Allow-Methods", "POST, OPTIONS")
        .writeHeader("Access-Control-Allow-Headers", "Content-Type")
        .writeStatus("204 No Content")
        .end();
    });
  })
  .get("/processed/*", (res, req) => {
    const requestedFile = req.getUrl().substring("/processed/".length);
    const filePath = path.join(processedDir, requestedFile);

    res.cork(() => {
      res.writeHeader("Access-Control-Allow-Origin", "https://localhost:8080");
      res.writeHeader("Access-Control-Allow-Methods", "GET, OPTIONS");
      res.writeHeader("Access-Control-Allow-Headers", "Content-Type");
    });

    if (fs.existsSync(filePath)) {
      const fileStream = fs.createReadStream(filePath);
      res.writeHeader("Content-Type", "application/dash+xml"); // Set for .mpd files

      fileStream.on("data", (chunk) => res.write(chunk));
      fileStream.on("end", () => res.end());
      fileStream.on("error", (err) => {
        console.error("Error reading file:", err);
        res.writeStatus("500 Internal Server Error").end("Error reading file.");
      });
    } else {
      res.writeStatus("404 Not Found").end("File not found.");
    }
  })
  .post("/*", (res, req) => {
    res.cork(() => {
      res.writeHeader("Access-Control-Allow-Origin", "https://localhost:8080");
    });

    const headers: { [header: string]: string } = {};
    req.forEach((key, value) => {
      headers[key] = value;
    });

    const bb = busboy({ headers });

    bb.on("file", (name, file, info) => {
      const filename = `${random()}.mp4`;
      const saveTo = path.join(uploadsDir, filename);
      const writeStream = fs.createWriteStream(saveTo);

      file.on("data", (chunk) => {});

      file.pipe(writeStream);

      file.on("end", async () => {
        // After upload is complete, process the video into DASH format
        try {
          await processVideoWithABR(saveTo, processedDir, filename);

          // Notify clients about the new video availability
          const videoUrl = `https://localhost:8044/processed/${filename.slice(
            0,
            -4
          )}.mpd`;
          const videoReadyMessage = JSON.stringify({
            type: "videoReady",
            filename: filename,
            url: videoUrl,
          });
          connectedClients.forEach((client) => {
            client.send(videoReadyMessage, false);
          });
        } catch (error) {
          console.error("Error during video processing:", error);
        }
      });

      file.on("error", (err) => {
        console.error(`Error writing file ${info.filename}:`, err);
      });
    });

    bb.on("close", () => {
      res.cork(() => {
        console.log("Upload complete");
        res.writeStatus("200 OK").end("That's all folks!");
      });
    });

    let bodyBuffer = Buffer.alloc(0);

    res.onData((chunk, isLast) => {
      bodyBuffer = Buffer.concat([bodyBuffer, Buffer.from(chunk)]);

      if (isLast) {
        bb.end(bodyBuffer);
      } else {
        bb.write(bodyBuffer);
        bodyBuffer = Buffer.alloc(0);
      }
    });

    res.onAborted(() => {
      console.log("Request aborted");
      bb.destroy();
    });
  })
  .listen(8045, (token) => {
    if (token) {
      console.log("Listening on https://localhost:8045");
    } else {
      console.log("Failed to start the server");
    }
  });
import React, { useEffect, useRef } from "react";
import shaka from "shaka-player";

export default function FileReceiver() {
  const videoRef = useRef<HTMLVideoElement>(null);

  useEffect(() => {
    const ws = new WebSocket("wss://localhost:8045");

    ws.onmessage = async (event) => {
      const message = JSON.parse(event.data);

      if (message.type === "videoReady") {
        const { url } = message;
        console.log(`Video is ready! Loading from: ${url}`);

        const player = new shaka.Player();

        try {
          // Attach the player to the video element
          await player.attach(videoRef.current);
          console.log("Player attached to the video element");

          // Load the video
          await player.load(url);
          console.log("Video loaded successfully");
        } catch (error) {
          console.error("Error loading video:", error);
        }
      }
    };

    return () => ws.close();
  }, []);

  return (
    <div style={{ padding: "20px" }}>
      <h1>Video Stream Receiver</h1>
      <video
        ref={videoRef}
        controls
        autoPlay
        style={{ width: "100%", maxHeight: "500px" }}
      />
    </div>
  );
}





















































import uWS from "uWebSockets.js";
import { randomFillSync } from "crypto";
import fs from "fs";
import path from "path";
import busboy from "busboy";
import { exec } from "child_process"; // For running shell commands (to invoke Shaka Packager)

// Ensure the uploads folder exists
const uploadsDir = path.join(__dirname, "../../nginxServer/uploads");
if (!fs.existsSync(uploadsDir)) {
  fs.mkdirSync(uploadsDir, { recursive: true });
}

// Ensure the output folder for processed videos exists
const processedDir = path.join(__dirname, "../../nginxServer/processed");
if (!fs.existsSync(processedDir)) {
  fs.mkdirSync(processedDir, { recursive: true });
}

const sslOptions = {
  key_file_name: "../certs/tabletop-table-static-content-server-key.pem",
  cert_file_name: "../certs/tabletop-table-static-content-server.pem",
};

const random = (() => {
  const buf = Buffer.alloc(16);
  return () => randomFillSync(buf).toString("hex");
})();

const connectedClients = new Set<uWS.WebSocket<unknown>>(); // Store WebSocket clients

// Function to process the uploaded video using Shaka Packager
const processVideoWithABR = (
  inputFile: string,
  outputDir: string,
  filename: string
): Promise<void> => {
  return new Promise((resolve, reject) => {
    const baseName = path.basename(filename, path.extname(filename));
    const video500kPath = path.join(outputDir, `${baseName}_500k.mp4`);
    const video1MPath = path.join(outputDir, `${baseName}_1M.mp4`);
    const video2MPath = path.join(outputDir, `${baseName}_2M.mp4`);
    const audioPath = path.join(outputDir, `${baseName}_audio.mp4`);
    const outputPath = path.join(outputDir, `${baseName}.mpd`);

    const packagerCommand = `packager-win-x64.exe \
      "in=${inputFile},stream=video,bandwidth=500000,output=${video500kPath}" \
      "in=${inputFile},stream=video,bandwidth=1000000,output=${video1MPath}" \
      "in=${inputFile},stream=video,bandwidth=2000000,output=${video2MPath}" \
      "in=${inputFile},stream=audio,output=${audioPath}" \
      --mpd_output "${outputPath}"`;

    const childProcess = exec(packagerCommand);

    let stderrBuffer = "";
    let stdoutBuffer = "";

    childProcess.stdout?.on("data", (data) => {
      stdoutBuffer += data;
      console.log("Shaka Packager stdout:", data.trim());
    });

    childProcess.stderr?.on("data", (data) => {
      stderrBuffer += data;
      console.warn("Shaka Packager stderr:", data.trim()); // Log as a warning, not error
    });

    childProcess.on("close", (code) => {
      if (code !== 0) {
        console.error(
          `Shaka Packager failed with exit code ${code}. stderr: ${stderrBuffer}`
        );
        reject(new Error(`Shaka Packager failed with exit code ${code}`));
      } else {
        console.log("Shaka Packager completed successfully.");
        resolve();
      }
    });

    childProcess.on("error", (err) => {
      console.error("Error running Shaka Packager:", err);
      reject(err);
    });
  });
};

uWS
  .SSLApp(sslOptions)
  .ws("/*", {
    compression: uWS.SHARED_COMPRESSOR,
    maxPayloadLength: 16 * 1024 * 1024, // 16 MB
    idleTimeout: 60,
    open: (ws) => {
      connectedClients.add(ws);
      console.log("WebSocket client connected");
    },
    close: (ws) => {
      connectedClients.delete(ws);
      console.log("WebSocket client disconnected");
    },
  })
  .options("/*", (res, req) => {
    res.cork(() => {
      res
        .writeHeader("Access-Control-Allow-Origin", "https://localhost:8080")
        .writeHeader("Access-Control-Allow-Methods", "POST, OPTIONS")
        .writeHeader("Access-Control-Allow-Headers", "Content-Type")
        .writeStatus("204 No Content")
        .end();
    });
  })
  .get("/processed/*", (res, req) => {
    const requestedFile = req.getUrl().substring("/processed/".length);
    const filePath = path.join(processedDir, requestedFile);

    res.cork(() => {
      res.writeHeader("Access-Control-Allow-Origin", "https://localhost:8080");
      res.writeHeader("Access-Control-Allow-Methods", "GET, OPTIONS");
      res.writeHeader("Access-Control-Allow-Headers", "Content-Type");
    });

    if (fs.existsSync(filePath)) {
      const fileStream = fs.createReadStream(filePath);
      res.writeHeader("Content-Type", "application/dash+xml"); // Set for .mpd files

      fileStream.on("data", (chunk) => res.write(chunk));
      fileStream.on("end", () => res.end());
      fileStream.on("error", (err) => {
        console.error("Error reading file:", err);
        res.writeStatus("500 Internal Server Error").end("Error reading file.");
      });
    } else {
      res.writeStatus("404 Not Found").end("File not found.");
    }
  })
  .post("/*", (res, req) => {
    res.cork(() => {
      res.writeHeader("Access-Control-Allow-Origin", "https://localhost:8080");
    });

    const headers: { [header: string]: string } = {};
    req.forEach((key, value) => {
      headers[key] = value;
    });

    const bb = busboy({ headers });

    bb.on("file", (name, file, info) => {
      const filename = `${random()}.mp4`;
      const saveTo = path.join(uploadsDir, filename);
      const writeStream = fs.createWriteStream(saveTo);

      file.on("data", (chunk) => {});

      file.pipe(writeStream);

      file.on("end", async () => {
        // Notify clients that the original file is ready
        const originalVideoUrl = `https://localhost:8044/uploads/${filename}`;
        const originalVideoMessage = JSON.stringify({
          type: "originalVideoReady",
          filename: filename,
          url: originalVideoUrl,
        });

        connectedClients.forEach((client) => {
          client.send(originalVideoMessage, false);
        });

        // Process video into DASH format in the background
        try {
          await processVideoWithABR(saveTo, processedDir, filename);

          // Notify clients to switch to the DASH stream
          const dashVideoUrl = `https://localhost:8044/processed/${filename.slice(
            0,
            -4
          )}.mpd`;
          const dashVideoMessage = JSON.stringify({
            type: "dashVideoReady",
            filename: filename,
            url: dashVideoUrl,
          });

          connectedClients.forEach((client) => {
            client.send(dashVideoMessage, false);
          });
        } catch (error) {
          console.error("Error during video processing:", error);
        }
      });
      file.on("error", (err) => {
        console.error(`Error writing file ${info.filename}:`, err);
      });
    });

    bb.on("close", () => {
      res.cork(() => {
        console.log("Upload complete");
        res.writeStatus("200 OK").end("That's all folks!");
      });
    });

    let bodyBuffer = Buffer.alloc(0);

    res.onData((chunk, isLast) => {
      bodyBuffer = Buffer.concat([bodyBuffer, Buffer.from(chunk)]);

      if (isLast) {
        bb.end(bodyBuffer);
      } else {
        bb.write(bodyBuffer);
        bodyBuffer = Buffer.alloc(0);
      }
    });

    res.onAborted(() => {
      console.log("Request aborted");
      bb.destroy();
    });
  })
  .listen(8045, (token) => {
    if (token) {
      console.log("Listening on https://localhost:8045");
    } else {
      console.log("Failed to start the server");
    }
  });
import React, { useEffect, useRef, useState } from "react";
import shaka from "shaka-player";

export default function FileReceiver() {
  const videoRef = useRef<HTMLVideoElement>(null);
  const hiddenVideoRef = useRef<HTMLVideoElement>(null);
  const shakaPlayer = useRef<shaka.Player | null>(null);
  const [showHiddenVideo, setShowHiddenVideo] = useState(false);

  useEffect(() => {
    if (videoRef.current) {
      shakaPlayer.current = new shaka.Player(videoRef.current);
    }

    const ws = new WebSocket("wss://localhost:8045");

    ws.onmessage = (event) => {
      const message = JSON.parse(event.data);

      if (message.type === "originalVideoReady") {
        const { url } = message;
        shakaPlayer.current
          ?.load(url)
          .then(() => {
            console.log("Original video loaded successfully");
          })
          .catch(onErrorEvent);
      }

      if (message.type === "dashVideoReady") {
        const { url } = message;
        preloadDashStream(url);
      }
    };

    return () => ws.close();
  }, []);

  const preloadDashStream = (dashUrl: string) => {
    if (hiddenVideoRef.current) {
      const hiddenPlayer = new shaka.Player(hiddenVideoRef.current);
      hiddenPlayer
        .load(dashUrl)
        .then(() => {
          switchToDashStream(dashUrl);
        })
        .catch(onErrorEvent);
    }
  };

  const switchToDashStream = async (dashUrl: string) => {
    if (!videoRef.current || !hiddenVideoRef.current) return;
    console.log("DASH stream swap");

    try {
      const currentTime = videoRef.current.currentTime;
      const isPaused = videoRef.current.paused;

      // Sync hidden video with the main video
      hiddenVideoRef.current.currentTime = currentTime;
      if (!isPaused) {
        hiddenVideoRef.current.play();
      }

      // Match the size and position of the main video
      applyHiddenVideoStyles();

      // Crossfade hidden video in and main video out
      setShowHiddenVideo(true);

      // After a short delay, switch the main video to DASH and hide the hidden video
      setTimeout(async () => {
        await shakaPlayer.current?.load(dashUrl, currentTime);
        videoRef.current.currentTime = currentTime;
        if (!isPaused) {
          videoRef.current.play();
        }

        // Hide the hidden video and clean up
        setShowHiddenVideo(false);
        hiddenVideoRef.current.pause();
        hiddenVideoRef.current.currentTime = 0;
      }, 500); // Adjust the delay if needed
    } catch (error) {
      console.error("Error during DASH switch:", error);
    }
  };

  // Dynamically apply styles to the hidden video to match the main video
  const applyHiddenVideoStyles = () => {
    if (!videoRef.current || !hiddenVideoRef.current) return;

    const mainVideoRect = videoRef.current.getBoundingClientRect();
    const hiddenVideo = hiddenVideoRef.current;

    hiddenVideo.style.position = "absolute";
    hiddenVideo.style.width = `${mainVideoRect.width}px`;
    hiddenVideo.style.height = `${mainVideoRect.height}px`;
    hiddenVideo.style.zIndex = "10";
    hiddenVideo.style.objectFit = "cover";
  };

  const onErrorEvent = (event: any) => {
    console.error("Error:", event);
  };

  return (
    <div
      style={{
        position: "relative",
        overflow: "hidden",
        width: "100%",
        maxHeight: "500px",
      }}
    >
      <video
        ref={videoRef}
        controls
        autoPlay
        style={{
          width: "100%",
          objectFit: "cover",
          backgroundColor: "#000",
        }}
      />
      <video
        ref={hiddenVideoRef}
        style={{
          position: "absolute",
          top: 0,
          left: 0,
          objectFit: "cover",
          display: showHiddenVideo ? "" : "none",
          pointerEvents: "none",
          backgroundColor: "#000",
        }}
      />
    </div>
  );
}


import React, { useState } from "react";

export default function Upload() {
  const [file, setFile] = useState<File | null>(null);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [uploadStatus, setUploadStatus] = useState("");

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFile(e.target.files ? e.target.files[0] : null);
  };

  const handleFileUpload = async () => {
    if (!file) {
      alert("Please select a file to upload");
      return;
    }

    const url = "https://localhost:8045"; // Your uWebSockets server URL
    const formData = new FormData();
    formData.append("file", file);

    try {
      const xhr = new XMLHttpRequest();

      xhr.open("POST", url, true);

      xhr.upload.onprogress = (e) => {
        if (e.lengthComputable) {
          const percentComplete = Math.round((e.loaded * 100) / e.total);
          setUploadProgress(percentComplete);
        }
      };

      xhr.onload = () => {
        if (xhr.status === 200) {
          setUploadStatus("File uploaded successfully!");
        } else {
          setUploadStatus("File upload failed.");
        }
      };

      xhr.onerror = () => {
        setUploadStatus("An error occurred during the upload.");
      };

      xhr.send(formData);
    } catch (error) {
      console.error("Error uploading file:", error);
      setUploadStatus("An unexpected error occurred.");
    }
  };

  // Handle drag over event to allow drop
  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    // Optionally, you can add styles to show drop zone active (e.g., change color)
  };

  // Handle drag leave event (optional, to reset styles)
  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    // Reset styles here if necessary
  };

  // Handle file drop
  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();

    const droppedFiles = e.dataTransfer.files;
    if (droppedFiles.length > 0) {
      const file = droppedFiles[0];
      setFile(file); // Set the file to the state (or handle it further)
      console.log("Dropped file:", file);
    }
  };

  return (
    <div>
      <div
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
        style={{
          width: "300px",
          height: "200px",
          border: "2px dashed #aaa",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          backgroundColor: "#f9f9f9",
          color: "#aaa",
          cursor: "pointer",
        }}
      >
        <p>{file ? file.name : "Drag a file here or select one"}</p>
      </div>

      <input
        type='file'
        onChange={handleFileChange}
        style={{ marginTop: "10px" }}
      />
      <button onClick={handleFileUpload} style={{ marginTop: "10px" }}>
        Upload
      </button>

      {uploadProgress > 0 && <p>Progress: {uploadProgress}%</p>}
      {uploadStatus && <p>Status: {uploadStatus}</p>}
    </div>
  );
}

